import asyncio
import json
from telethon import events, TelegramClient

class UserHandler:
    def __init__(self, config_path="../config/keys.json", channels_path="../config/all_channels.json"):
        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)

        self.API_ID = config["API_ID"]
        self.API_HASH = config["API_HASH"]
        self.BOT_USERNAME = config["BOT_USERNAME"]

        with open(channels_path, "r", encoding="utf-8") as f:
            channels_config = json.load(f)

        self.channel_ids = [channel["id"] for channel in channels_config]

        self.user_client = TelegramClient("user_session", self.API_ID, self.API_HASH)
        self.lock = asyncio.Lock()

        self.user_client.on(events.NewMessage(chats=self.channel_ids))(self.handle_channel_message)

    async def handle_channel_message(self, event):
        async with self.lock:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_name = event.chat.title if event.chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: üîÅ {channel_name}"
                channel_info_msg = await self.user_client.send_message(self.BOT_USERNAME, message_text)
                print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {channel_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.")

                # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                forwarded_msg = await self.user_client.forward_messages(self.BOT_USERNAME, event.message)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –±–æ—Ç—É.")

                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö id
                if isinstance(forwarded_msg, list):
                    msg_ids = [msg.id for msg in forwarded_msg]
                else:
                    msg_ids = [forwarded_msg.id]

                msg_ids.append(channel_info_msg.id)

                # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º (–≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
                await asyncio.sleep(0.5)
                await self.user_client.delete_messages(self.BOT_USERNAME, msg_ids, revoke=True)
                print("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É:", e)

    async def start(self):
        await self.user_client.start()
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")

    async def start_and_wait(self):
        await self.start()
        await self.user_client.run_until_disconnected()