import json
from telethon import events, TelegramClient

class BotHandler:
    def __init__(self, event_queue, config_path="../config/keys.json"):
        self.event_queue = event_queue

        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)

        self.API_ID = config["API_ID"]
        self.API_HASH = config["API_HASH"]
        self.BOT_TOKEN = config["BOT_API_TOKEN"]
        self.TARGET_USER_ID = config["TARGET_USER_ID"]

        self.bot_client = TelegramClient("bot_session", self.API_ID, self.API_HASH)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot_client.on(events.NewMessage())(self.handle_bot_message)

    async def handle_bot_message(self, event):
        print("üî¥BotHandlerüî¥: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try:
            if event.message.text.startswith("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:"):
                message_text = event.message.text.replace("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:", "").strip()
                await self.bot_client.send_message(self.TARGET_USER_ID, message_text)
                print(f"üî¥BotHandlerüî¥: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
            else:
                await self.bot_client.forward_messages(self.TARGET_USER_ID, event.message)
                print("üî¥BotHandlerüî¥: –ë–æ—Ç –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–º.")
            await self.event_queue.put("ACK")
        except Exception as e:
            print("üî¥BotHandlerüî¥: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–º:", e)

    async def start(self):
        await self.bot_client.start(bot_token=self.BOT_TOKEN)
        print("üî¥BotHandlerüî¥: –ë–æ—Ç-–∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")

    async def start_and_wait(self):
        await self.start()
        await self.bot_client.run_until_disconnected()