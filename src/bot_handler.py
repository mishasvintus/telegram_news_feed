import json
import asyncio
from telethon import events, TelegramClient


class BotHandler:
    def __init__(self, event_queue, config_path="../config/keys.json"):
        self.event_queue = event_queue

        with open(config_path, "r", encoding="utf-8") as f:
            config = json.load(f)

        self.API_ID = config["API_ID"]
        self.API_HASH = config["API_HASH"]
        self.BOT_TOKEN = config["BOT_API_TOKEN"]
        self.TARGET_USER_ID = config["TARGET_USER_ID"]

        self.bot_client = TelegramClient("bot_session", self.API_ID, self.API_HASH)
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è id —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ grouped_id
        self.media_groups = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.bot_client.on(events.NewMessage())(self.handle_bot_message)

    async def handle_bot_message(self, event):
        group_id = getattr(event.message, "grouped_id", None)

        if group_id is None or group_id not in self.media_groups:
            if group_id is not None:
                self.media_groups[group_id] = [event.message.id]

            if event.message.text and event.message.text.startswith("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:"):
                message_text = event.message.text.replace("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:", "").strip()
                await self.bot_client.send_message(self.TARGET_USER_ID, message_text)
                await self.event_queue.put("ACK")
                return

            if group_id is not None:
                await asyncio.sleep(0.5)
                msg_ids_to_forward = self.media_groups.pop(group_id, [])
            else:
                msg_ids_to_forward = [event.message.id]

            await self.bot_client.forward_messages(
                self.TARGET_USER_ID,
                msg_ids_to_forward,
                from_peer=event.chat
            )

            print("üî¥BotHandlerüî¥: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            for i in range(len(msg_ids_to_forward)):
                await self.event_queue.put("ACK")
        else:
            self.media_groups[group_id].append(event.message.id)
            print(f"üî¥BotHandlerüî¥: –°–æ–æ–±—â–µ–Ω–∏–µ —Å group_id {group_id} –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def start(self):
        await self.bot_client.start(bot_token=self.BOT_TOKEN)
        print("üî¥BotHandlerüî¥: –ë–æ—Ç-–∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")

    async def start_and_wait(self):
        await self.start()
        await self.bot_client.run_until_disconnected()
