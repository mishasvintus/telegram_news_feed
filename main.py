import json
import asyncio
from telethon import TelegramClient, events


async def main():
    with open("keys.json", "r", encoding="utf-8") as f:
        config = json.load(f)

    API_ID = config["API_ID"]
    API_HASH = config["API_HASH"]
    BOT_TOKEN = config["BOT_API_TOKEN"]
    TARGET_USER_ID = config["TARGET_USER_ID"]
    BOT_USERNAME = config["BOT_USERNAME"]

    with open("all_channels.json", "r", encoding="utf-8") as f:
        channels_config = json.load(f)
    channel_ids = [channel["id"] for channel in channels_config]

    user_client = TelegramClient("user_session", API_ID, API_HASH)
    bot_client = TelegramClient("bot_session", API_ID, API_HASH)

    # –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ handle_channel_message
    lock = asyncio.Lock()

    processed_group_ids = set()

    @user_client.on(events.NewMessage(chats=channel_ids))
    async def handle_channel_message(event):
        async with lock:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            try:
                nonlocal BOT_USERNAME

                if not BOT_USERNAME:
                    me = await bot_client.get_me()
                    BOT_USERNAME = me.username
                    print("–ü–æ–ª—É—á–µ–Ω username –±–æ—Ç–∞:", BOT_USERNAME)

                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                channel_name = event.chat.title if event.chat else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
                message_text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞: üîÅ {channel_name}"
                channel_info_msg = await user_client.send_message(BOT_USERNAME, message_text)
                print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ {channel_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.")

                # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                forwarded_msg = await user_client.forward_messages(BOT_USERNAME, event.message)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_name} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –±–æ—Ç—É.")

                # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö id
                if isinstance(forwarded_msg, list):
                    msg_ids = [msg.id for msg in forwarded_msg]
                else:
                    msg_ids = [forwarded_msg.id]

                msg_ids.append(channel_info_msg.id)

                # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º (–≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ)
                await asyncio.sleep(0.5)
                await user_client.delete_messages(BOT_USERNAME, msg_ids, revoke=True)
                print("–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É:", e)

    @bot_client.on(events.NewMessage)
    async def handle_bot_message(event):
        print("–ë–æ—Ç: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:", –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ, –∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            if event.message.text.startswith("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:"):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = event.message.text.replace("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:", "").strip()
                await bot_client.send_message(TARGET_USER_ID, message_text)
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞–Ω–∞–ª–µ, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ
                await bot_client.forward_messages(TARGET_USER_ID, event.message)
                print("–ë–æ—Ç –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–º.")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–º:", e)

    await user_client.start()
    await bot_client.start(bot_token=BOT_TOKEN)
    print("–ö–ª–∏–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã.")

    await asyncio.gather(
        user_client.run_until_disconnected(),
        bot_client.run_until_disconnected()
    )


if __name__ == '__main__':
    asyncio.run(main())
